
#######################################################################################
05.02 ~ 
#######################################################################################
###
html에서 public 폴더 이미지를 사용할 땐 import 필요없이 /img경로 가능
(서버 이미지일 경우는 다르게함)

###
import ~ ./로 시작이면 내 파일안
아닌 경우는 라이브러리 끌어다 쓰는거임

###
let navigate = useNavigate();
navigate(1) -> 앞으로 한페이지 이동
navigate(-1) -> 뒤로 한페이지 이동 (-2면 두번 뒤로 이동)

###
nested Routes
element가 2개보임 (부모, 자식)
===> 자식은 부모 컴포넌트안에 <Outlet>태그 사용해야지 보임

### 리액트 프로젝트 구조 ?
1. 컴포넌트 역할하는 js 파일은 components 폴더에 묶고
2. 페이지 역할하는 js 파일은 routes 아니면 pages 폴더에 묶고
3. 자주 쓰는 함수가 들어있는 js 파일은 utils 폴더에 묶고

### styled-components?
JS 파일에서 바로 스타일 적용 가능
기본 App.js에 import 되어있는 App.css에 의해서 먹어져있는 css를 거꾸로 변형시키진않음
props 사용 가능

### Link vs NavLink ?
Link :: 브라우저의 주소만 바꿀뿐, 페이지를 새로 불러오지는 않는다.
NavLink :: Link + 특정 링크에 스타일을 넣어 줄 수 있다.

###useEffect ?
1. useEffect 안에 적은 코드는 html 렌더링 이후에 동작
2. 오래걸리는 반복연산, 서버에서 데이터가져오는 작업, 타이머다는거 
이런건 useEffect 안에 많이 적습니다.
3. useEffect안의 return은 useEffect 동작전에 실행된다. 
===> clean up function
	기존 코드 치우는걸 이 부분에 많이함
	타이머 용도로 많이 사용되는데, 이경우 clearTimeout() 이라는 함수가 제공되고 있음


===> 한번 더 정리 ~
1. useEffect(()=>{ 실행할코드 })
재렌더링마다 코드를 실행

2. useEffect(()=>{ 실행할코드 }, [])
mount시 (로드시) 1회만 실행

3. useEffect(()=>{ 
  return ()=>{
    실행할코드
  }
})
 useEffect 안의 코드 실행 전에 실행

4. useEffect(()=>{ 
  return ()=>{
    실행할코드
  }
}, [])
unmount시 1회 실행

5. useEffect(()=>{ 
  실행할코드
}, [state1])
state1이 변경될 때만 실행



### axios vs fetch ?
서버와 데이터는 모두 문자 자료형식만 주고받을 수 있음 (array/object는 "" JSON 형식으로 가능해진거임 )
===> 그래서 항상 JSON형태로 온건 문자형태로 다시 바꿔야하는데, 이걸 axios 라이브러리는 자동으로 해주고
	fetch는 손수 해야함


### 2단계 이상의 자식 컴포넌트에게 데이터를 보내주고 싶을 경우 ?
1. Context API
	export let Context1 = React.createContext();
	useContext(Context1)
	단점 :: state 변경시 쓸데없는 컴포넌트까지 전부 재렌더링 ===> 보통 redux 외부 라이브러리를 많이 사용함
2.Redux
	props 없이 state를 공유할 수 있게 도와주는 라이브러리
	store.js 파일
	index.js 파일가서 Provider 라는 컴포넌트와 store.js import 해야함 ===> <App>과 모든 자식들은 모두 state를 맘대로 꺼내쓸 수 있음


### 서버대신 localStorage + redux-persist 사용
1.
JSON.stringify() / JSON.parse()
new Set() / Array.from()
base64 / decodeURIComponent

2.
### persistStore
	redux store 생성
### persistor
	스토어 내용이 정의된 변수를 대입
### PersistGate
	기억할 데이터들을 저장 + 불러오기 (렌더링 지연해줌) 
	PersistGate로 root component 감싸야함
### persistReducer
	redux-persist + redux에 담긴 데이터 ===> persist 정보를 반환

#######################################################################################
05.21 ~ 
#######################################################################################
### ETC
1. lazy 나중에 필요할 때 불러라
2. memo()/useMemo() 재렌더링 하지마
	*근데 상위 데이터 바뀌면 먹음. 그래서 다르게 예외 처리함
3. useTransition pending시 버벅임 개선 (useState랑 유사)
	+ useDeferredValue 변수 하나로 변경값 인식함

